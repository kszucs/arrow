# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

# The environment variables referenced from this docker-compose can be set by
# defining them before running docker-compose, the defaults are set in .env
# file.
#
# Example:
# $ ARCH=arm64v8 docker-compose build ubuntu-bionic-cpp
# $ ARCH=arm64v8 docker-compose run ubuntu-bionic-cpp

version: '3.5'

# TODO(kszucs): include ARCH to cache as well
volumes:
  conda-latest-cache:
  cuda-10.0-cache:
  debian-10-cache:
  ubuntu-18.04-cache:
  ubuntu-16.04-cache:
  ubuntu-14.04-cache:
  fedora-29-cache:
  maven-cache:

services:

  ################################# C++ #######################################
  # Release build:
  #   docker-compose build -e ARROW_BUILD_TYPE=release conda-cpp|debian-cpp|...
  # Shared only:
  #   docker-compose build -e ARROW_BUILD_STATIC=OFF conda-cpp|debian-cpp|...
  # Static only:
  #   docker-compose build \
  #     -e ARROW_BUILD_SHARED=OFF \
  #     -e ARROW_TEST_LINKAGE=static \
  #     conda-cpp|debian-cpp|...
  # Minimum boost - Ubuntu Xenial 16.04 has Boost 1.58:
  #   UBUNTU=16.04 docker-compose build \
  #     -e ARROW_BOOST_SOURCE=SYSTEM \
  #     ubuntu-cpp

  conda-cpp:
    # Usage:
    #   docker-compose build conda-cpp
    #   docker-compose run --rm conda-cpp
    image: ${ORG}/${ARCH}-conda-latest-cpp:latest
    build:
      context: .
      dockerfile: ci/docker/conda-latest-cpp.dockerfile
      cache_from:
        - ${ORG}/${ARCH}-conda-latest-cpp:latest
      args:
        arch: ${ARCH}
        conda: latest
        prefix: /opt/conda
    shm_size: &shm-size 2G
    volumes: &conda-volumes
      - .:/arrow:delegated
      - conda-latest-cache:/build:delegated
    entrypoint: &conda-entrypoint /bin/bash -c -l
    command: &cpp-conda-command
      ["/arrow/ci/scripts/cpp_conda_build.sh /arrow /build/cpp &&
        /arrow/ci/scripts/cpp_test.sh /arrow /build/cpp"]

  cuda-cpp:
    # Usage:
    #   docker-compose build cuda-cpp
    #   docker-compose run --rm cuda-cpp
    # Parameters:
    #   ARCH: only amd64
    #   CUDA: 8.0, 10.0, ...
    image: ${ORG}/${ARCH}-cuda-${CUDA}-cpp:latest
    build:
      context: .
      dockerfile: ci/docker/cuda-${CUDA}-cpp.dockerfile
      cache_from:
        - ${ORG}/${ARCH}-cuda-${CUDA}-cpp:latest
    shm_size: *shm-size
    volumes: &cuda-volumes
      - .:/arrow:delegated
      - cuda-${CUDA}-cache:/build:delegated
    command: &cpp-command >
      /bin/bash -c "
        /arrow/ci/scripts/cpp_build.sh /arrow /build/cpp &&
        /arrow/ci/scripts/cpp_test.sh /arrow /build/cpp"

  debian-cpp:
    # Usage:
    #   docker-compose build debian-cpp
    #   docker-compose run --rm debian-cpp
    # Parameters:
    #   ARCH: amd64, arm64v8, ...
    #   DEBIAN: 10
    image: ${ORG}/${ARCH}-debian-${DEBIAN}-cpp:latest
    build:
      context: .
      dockerfile: ci/docker/debian-${DEBIAN}-cpp.dockerfile
      cache_from:
        - ${ORG}/${ARCH}-debian-${DEBIAN}-cpp:latest
      args:
        arch: ${ARCH}
    shm_size: *shm-size
    volumes: &debian-volumes
      - .:/arrow:delegated
      - debian-${DEBIAN}-cache:/build:delegated
    command: *cpp-command

  ubuntu-cpp:
    # Usage:
    #   docker-compose build ubuntu-cpp
    #   docker-compose run --rm ubuntu-cpp
    # Parameters:
    #   ARCH: amd64, arm64v8, ...
    #   UBUNTU: 18.04, 16.04, 14.04
    image: ${ORG}/${ARCH}-ubuntu-${UBUNTU}-cpp:latest
    build:
      context: .
      dockerfile: ci/docker/ubuntu-${UBUNTU}-cpp.dockerfile
      cache_from:
        - ${ORG}/${ARCH}-ubuntu-${UBUNTU}-cpp:latest
      args:
        arch: ${ARCH}
    shm_size: *shm-size
    volumes: &ubuntu-volumes
      - .:/arrow:delegated
      - ubuntu-${UBUNTU}-cache:/build:delegated
    command: *cpp-command

  fedora-cpp:
    image: ${ORG}/${ARCH}-fedora-${FEDORA}-cpp:latest
    build:
      context: .
      dockerfile: ci/docker/fedora-${FEDORA}-cpp.dockerfile
      cache_from:
        - ${ORG}/${ARCH}-fedora-${FEDORA}-cpp:latest
      args:
        arch: ${ARCH}
    shm_size: *shm-size
    volumes: &fedora-volumes
      - .:/arrow:delegated
      - fedora-${FEDORA}-cache:/build:delegated
    command: *cpp-command

  ############################### C GLib ######################################

  debian-c-glib:
    image: ${ORG}/${ARCH}-debian-${DEBIAN}-c-glib:latest
    build:
      context: .
      dockerfile: ci/docker/linux-apt-c-glib.dockerfile
      cache_from:
        - ${ORG}/${ARCH}-debian-${DEBIAN}-c-glib:latest
      args:
        base: ${ORG}/${ARCH}-debian-${DEBIAN}-cpp:latest
    shm_size: *shm-size
    volumes: *debian-volumes
    command: &c-glib-command >
      /bin/bash -c "
        /arrow/ci/scripts/cpp_build.sh /arrow /build/cpp &&
        /arrow/ci/scripts/c_glib_build.sh /arrow /build/c_glib &&
        /arrow/ci/scripts/c_glib_test.sh /arrow /build/c_glib"

  ubuntu-c-glib:
    image: ${ORG}/${ARCH}-ubuntu-${UBUNTU}-c-glib:latest
    build:
      context: .
      dockerfile: ci/docker/linux-apt-c-glib.dockerfile
      cache_from:
        - ${ORG}/${ARCH}-ubuntu-${UBUNTU}-c-glib:latest
      args:
        base: ${ORG}/${ARCH}-ubuntu-${UBUNTU}-cpp:latest
    shm_size: *shm-size
    volumes: *ubuntu-volumes
    command: *c-glib-command

  ############################### Python ######################################

  conda-python:
    image: ${ORG}/${ARCH}-conda-latest-python-${PYTHON}:latest
    build:
      context: .
      dockerfile: ci/docker/conda-latest-python.dockerfile
      cache_from:
        - ${ORG}/${ARCH}-conda-latest-python-${PYTHON}:latest
      args:
        org: ${ORG}
        arch: ${ARCH}
        conda: latest
        python: ${PYTHON}
    shm_size: *shm-size
    volumes: *conda-volumes
    entrypoint: *conda-entrypoint
    command: &python-conda-command
      ["/arrow/ci/scripts/cpp_conda_build.sh /arrow /build/cpp &&
        /arrow/ci/scripts/python_build.sh /arrow &&
        /arrow/ci/scripts/python_test.sh /arrow"]

  cuda-python:
    image: ${ORG}/${ARCH}-cuda-${CUDA}-python-3:latest
    build:
      context: .
      dockerfile: ci/docker/linux-apt-python-3.dockerfile
      cache_from:
        - ${ORG}/${ARCH}-cuda-${CUDA}-python-3:latest
      args:
        base: ${ORG}/${ARCH}-cuda-${CUDA}-cpp:latest
    shm_size: *shm-size
    volumes: *cuda-volumes
    command: &python-command >
      /bin/bash -c "
        /arrow/ci/scripts/cpp_build.sh /arrow /build/cpp &&
        /arrow/ci/scripts/python_build.sh /arrow &&
        /arrow/ci/scripts/python_test.sh /arrow"

  debian-python:
    image: ${ORG}/${ARCH}-debian-${DEBIAN}-python-3:latest
    build:
      context: .
      dockerfile: ci/docker/linux-apt-python-3.dockerfile
      cache_from:
        - ${ORG}/${ARCH}-debian-${DEBIAN}-python-3:latest
      args:
        base: ${ORG}/${ARCH}-debian-${DEBIAN}-cpp:latest
    shm_size: *shm-size
    volumes: *debian-volumes
    command: *python-command

  ubuntu-python:
    image: ${ORG}/${ARCH}-ubuntu-${UBUNTU}-python-3:latest
    build:
      context: .
      dockerfile: ci/docker/linux-apt-python-3.dockerfile
      cache_from:
        - ${ORG}/${ARCH}-ubuntu-${UBUNTU}-python-3:latest
      args:
        base: ${ORG}/${ARCH}-ubuntu-${UBUNTU}-cpp:latest
    shm_size: *shm-size
    volumes: *ubuntu-volumes
    command: *python-command

  fedora-python:
    image: ${ORG}/${ARCH}-fedora-${FEDORA}-python-3:latest
    build:
      context: .
      dockerfile: ci/docker/linux-dnf-python-3.dockerfile
      cache_from:
        - ${ORG}/${ARCH}-fedora-${FEDORA}-python-3:latest
      args:
        base: ${ORG}/${ARCH}-fedora-${FEDORA}-cpp:latest
    shm_size: *shm-size
    volumes: *fedora-volumes
    command: *python-command

  ########################### Python Integration ##############################

  conda-python-pandas:
    # document to use --no-cache in case of PANDAS=master
    image: ${ORG}/${ARCH}-conda-latest-python-${PYTHON}-pandas-${PANDAS}:latest
    build:
      context: .
      dockerfile: ci/docker/conda-latest-python-pandas.dockerfile
      cache_from:
        - ${ORG}/${ARCH}-conda-latest-python-${PYTHON}-pandas-${PANDAS}:latest
      args:
        org: ${ORG}
        arch: ${ARCH}
        conda: latest
        python: ${PYTHON}
        pandas: ${PANDAS}
    shm_size: *shm-size
    volumes: *conda-volumes
    entrypoint: *conda-entrypoint
    command: *python-conda-command

  conda-python-dask:
    # document to use --no-cache in case of DASK=master
    image: ${ORG}/${ARCH}-conda-latest-python-${PYTHON}-dask-${DASK}:latest
    build:
      context: .
      dockerfile: ci/docker/conda-latest-python-dask.dockerfile
      cache_from:
        - ${ORG}/${ARCH}-conda-latest-python-${PYTHON}-dask-${DASK}:latest
      args:
        org: ${ORG}
        arch: ${ARCH}
        conda: latest
        python: ${PYTHON}
        dask: ${DASK}
    shm_size: *shm-size
    volumes: *conda-volumes
    entrypoint: *conda-entrypoint
    command:
      ["/arrow/ci/scripts/cpp_conda_build.sh /arrow /build/cpp &&
        /arrow/ci/scripts/python_build.sh /arrow &&
        /arrow/ci/scripts/integration_dask.sh"]

  conda-python-turbodbc:
    # document to use --no-cache in case of TURBODBC=master
    image: ${ORG}/${ARCH}-conda-latest-python-${PYTHON}-turbodbc-${TURBODBC}:latest
    build:
      context: .
      dockerfile: ci/docker/conda-latest-python-turbodbc.dockerfile
      cache_from:
        - ${ORG}/${ARCH}-conda-latest-python-${PYTHON}-turbodbc-${TURBODBC}:latest
      args:
        org: ${ORG}
        arch: ${ARCH}
        conda: latest
        python: ${PYTHON}
        turbodbc: ${TURBODBC}
    shm_size: *shm-size
    volumes: *conda-volumes
    entrypoint: *conda-entrypoint
    command:
      ["/arrow/ci/scripts/cpp_conda_build.sh /arrow /build/cpp &&
        /arrow/ci/scripts/python_build.sh /arrow &&
        /arrow/ci/scripts/integration_turbodbc.sh /turbodbc /build/turbodbc"]

  ########################## Python Wheels ####################################

  centos-python-manylinux1:
    image: ${ORG}/amd64-centos-python-manylinux1:latest
    build:
      context: python/manylinux1
      dockerfile: Dockerfile-x86_64_base
      cache_from:
        - ${ORG}/amd64-centos-python-manylinux1:latest
    shm_size: *shm-size
    environment:
      PYARROW_PARALLEL: 3
      PYTHON_VERSION: ${PYTHON_VERSION:-3.6}
      UNICODE_WIDTH: ${UNICODE_WIDTH:-16}
    volumes: &manylinux-volumes
      - .:/arrow:delegated
      - ./python/manylinux1:/io:delegated
    command: &manylinux-command /io/build_arrow.sh

  centos-python-manylinux2010:
    image: ${ORG}/amd64-centos-python-manylinux2010:latest
    build:
      context: python/manylinux2010
      dockerfile: Dockerfile-x86_64_base
      cache_from:
        - ${ORG}/amd64-centos-python-manylinux2010:latest
    shm_size: *shm-size
    environment:
      PYARROW_PARALLEL: 3
      PYTHON_VERSION: ${PYTHON_VERSION:-3.6}
      UNICODE_WIDTH: ${UNICODE_WIDTH:-16}
    volumes: *manylinux-volumes
    command: *manylinux-command

  ################################## R ########################################

  conda-r:
    image: ${ORG}/${ARCH}-conda-latest-r-${R}:latest
    build:
      context: .
      dockerfile: ci/docker/conda-latest-r.dockerfile
      cache_from:
        - ${ORG}/${ARCH}-conda-latest-r-${R}:latest
      args:
        org: ${ORG}
        arch: ${ARCH}
        conda: latest
        r: ${R}
    shm_size: *shm-size
    volumes: *conda-volumes
    entrypoint: *conda-entrypoint
    command:
      ["/arrow/ci/scripts/cpp_conda_build.sh /arrow /build/cpp &&
        /arrow/ci/scripts/r_build.sh /arrow &&
        /arrow/ci/scripts/r_test.sh /arrow"]

  ubuntu-r:
    image: ${ORG}/${ARCH}-ubuntu-${UBUNTU}-r-3.6:latest
    build:
      context: .
      dockerfile: ci/docker/linux-apt-r-3.6.dockerfile
      cache_from:
        - ${ORG}/${ARCH}-ubuntu-${UBUNTU}-r-3.6:latest
      args:
        base: ${ORG}/${ARCH}-ubuntu-${UBUNTU}-cpp:latest
    shm_size: *shm-size
    volumes: *ubuntu-volumes
    command: >
      /bin/bash -c "
        /arrow/ci/scripts/cpp_build.sh /arrow /build/cpp &&
        /arrow/ci/scripts/r_deps.sh /arrow &&
        /arrow/ci/scripts/r_build.sh /arrow &&
        /arrow/ci/scripts/r_test.sh /arrow"

  ubuntu-r-sanitizer:
    # only 18.04 and amd64 supported
    # Usage:
    #   docker-compose build ubuntu-r-sanitizer
    #   docker-compose run ubuntu-r-sanitizer
    image: ${ORG}/amd64-ubuntu-18.04-r-sanitizer:latest
    cap_add:
      # LeakSanitizer and gdb requires ptrace(2)
      - SYS_PTRACE
    build:
      context: .
      dockerfile: ci/docker/ubuntu-18.04-r-sanitizer.dockerfile
      cache_from:
        - ${ORG}/amd64-ubuntu-18.04-r-sanitizer:latest
    volumes: *ubuntu-volumes
    command: >
      /bin/bash -c "
        /arrow/ci/scripts/cpp_build.sh /arrow /build/cpp &&
        /arrow/ci/scripts/r_deps.sh /arrow &&
        /arrow/ci/scripts/r_build.sh /arrow &&
        /arrow/ci/scripts/r_sanitize.sh /arrow"

  ################################ Rust #######################################

  debian-rust:
    image: ${ORG}/${ARCH}-debian-10-rust-${RUST}:latest
    build:
      context: .
      dockerfile: ci/docker/debian-10-rust.dockerfile
      cache_from:
        - ${ORG}/${ARCH}-debian-10-rust-${RUST}:latest
      args:
        arch: ${ARCH}
        rust: ${RUST}
    shm_size: *shm-size
    volumes: *debian-volumes
    command: &rust-command >
      /bin/bash -c "
        /arrow/ci/scripts/rust_build.sh /arrow /build/rust &&
        /arrow/ci/scripts/rust_test.sh /arrow /build/rust"

  ################################# Go ########################################

  debian-go:
    image: ${ORG}/${ARCH}-debian-10-go-${GO}:latest
    build:
      context: .
      dockerfile: ci/docker/debian-10-go.dockerfile
      cache_from:
        - ${ORG}/${ARCH}-debian-10-go-${GO}:latest
      args:
        arch: ${ARCH}
        go: ${GO}
    shm_size: *shm-size
    volumes: *debian-volumes
    command: &go-command >
      /bin/bash -c "
        /arrow/ci/scripts/go_build.sh /arrow &&
        /arrow/ci/scripts/go_test.sh /arrow"

  ############################# JavaScript ####################################

  debian-js:
    image: ${ORG}/${ARCH}-debian-10-js-${NODE}:latest
    build:
      context: .
      dockerfile: ci/docker/debian-10-js.dockerfile
      cache_from:
        - ${ORG}/${ARCH}-debian-10-js-${NODE}:latest
      args:
        arch: ${ARCH}
        node: ${NODE}
    shm_size: *shm-size
    volumes: *debian-volumes
    command: &js-command >
      /bin/bash -c "
        /arrow/ci/scripts/js_build.sh /arrow &&
        /arrow/ci/scripts/js_test.sh /arrow"

  ################################ Java #######################################

  debian-java:
    image: ${ORG}/${ARCH}-debian-10-java-${JDK}-maven-${MAVEN}:latest
    build:
      context: .
      dockerfile: ci/docker/debian-10-java.dockerfile
      cache_from:
        - ${ORG}/${ARCH}-debian-10-java-${JDK}-maven-${MAVEN}:latest
      args:
        arch: ${ARCH}
        jdk: ${JDK}
        maven: ${MAVEN}
    shm_size: *shm-size
    volumes: &java-volumes
      - .:/arrow:delegated
      - maven-cache:/root/.m2:delegated
    command: &java-command >
      /bin/bash -c "
        /arrow/ci/scripts/java_build.sh /arrow &&
        /arrow/ci/scripts/java_test.sh /arrow"

  ################################ Docs #######################################

  conda-docs:
    image: ${ORG}/${ARCH}-conda-latest-python-${PYTHON}-docs:latest
    build:
      context: .
      dockerfile: ci/docker/conda-latest-python-docs.dockerfile
      cache_from:
        - ${ORG}/${ARCH}-conda-latest-python-${PYTHON}-docs:latest
      args:
        org: ${ORG}
        arch: ${ARCH}
        conda: latest
        python: ${PYTHON}
    volumes: *conda-volumes
    entrypoint: *conda-entrypoint
    command:
      ["/arrow/ci/scripts/cpp_conda_build.sh /arrow /build/cpp &&
        /arrow/ci/scripts/python_build.sh /arrow &&
        /arrow/ci/scripts/docs_build.sh /arrow"]

  ################################# Lint ######################################

  lint:
    image: ${ORG}/${ARCH}-debian-${DEBIAN}-lint:latest
    build:
      context: .
      dockerfile: ci/docker/linux-apt-lint.dockerfile
      cache_from:
        - ${ORG}/${ARCH}-debian-${DEBIAN}-lint:latest
      args:
        base: ${ORG}/${ARCH}-debian-${DEBIAN}-cpp:latest
    volumes: *debian-volumes
    command: >
      /bin/bash -c "
        pip install -e /arrow/dev/archery &&
        archery lint"

  # cpp-cmake32:
  #   # Usage:
  #   #   docker-compose build cpp-cmake32
  #   #   docker-compose run cpp-cmake32
  #   image: arrow:cpp-cmake32
  #   shm_size: 2G
  #   build:
  #     context: .
  #     dockerfile: cpp/Dockerfile.cmake
  #     args:
  #       CMAKE_VERSION: 3.2.3
  #   environment:
  #     # Vendor boost to avoid dealing with stale FindBoost.
  #     ARROW_BOOST_SOURCE: "BUNDLED"
  #     ARROW_ORC: "OFF"
  #     # uriparser requires cmake 3.3
  #     ARROW_FLIGHT: "OFF"
  #     PARQUET_TEST_DATA: /arrow/cpp/submodules/parquet-testing/data
  #   volumes: *ubuntu-volumes

  ######################### Tools and Linters #################################

  # fuzzit:
  #   # Usage:
  #   #   docker-compose build cpp
  #   #   docker-compose build fuzzit
  #   #   docker-compose run fuzzit
  #   image: arrow:fuzzit
  #   build:
  #     context: .
  #     dockerfile: dev/fuzzit/Dockerfile
  #   environment:
  #     CI_ARROW_SHA: ${CI_ARROW_SHA}
  #     CI_ARROW_BRANCH: ${CI_ARROW_BRANCH}
  #   volumes: *ubuntu-volumes

  ######################### Integration Tests #################################

  impala:
    # Required to test hiveserver2
    image: cpcloud86/impala:java8-1
    ports:
      - "21050"
    hostname: impala

  conda-cpp-hiveserver2:
    # Usage:
    #   docker-compose build conda-cpp
    #   docker-compose build conda-cpp-hiveserver2
    #   docker-compose run conda-cpp-hiveserver2
    image: ${ORG}/${ARCH}-conda-latest-cpp:latest
    links:
      - impala:impala
    environment:
      - ARROW_HIVESERVER2=ON
      - ARROW_HIVESERVER2_TEST_HOST=impala
    shm_size: *shm-size
    volumes: *conda-volumes
    entrypoint: *conda-entrypoint
    command:
      ["/arrow/ci/scripts/cpp_conda_build.sh /arrow /build/cpp &&
        /arrow/ci/scripts/integration_hiveserver2.sh /arrow /build/cpp"]

  hdfs-namenode:
    image: gelog/hadoop
    shm_size: 2G
    ports:
      - "9000:9000"
      - "50070:50070"
    command: hdfs namenode
    hostname: hdfs-namenode

  hdfs-datanode-1:
    image: gelog/hadoop
    command: hdfs datanode
    ports:
      # The host port is randomly assigned by Docker, to allow scaling
      # to multiple DataNodes on the same host
      - "50075"
    links:
      - hdfs-namenode:hdfs-namenode

  hdfs-datanode-2:
    image: gelog/hadoop
    command: hdfs datanode
    ports:
      # The host port is randomly assigned by Docker, to allow scaling
      # to multiple DataNodes on the same host
      - "50075"
    links:
      - hdfs-namenode:hdfs-namenode

  conda-python-hdfs:
    # Usage:
    #   docker-compose build conda-cpp
    #   docker-compose build conda-python
    #   docker-compose build conda-python-hdfs
    #   docker-compose run conda-python-hdfs
    image: ${ORG}/${ARCH}-conda-latest-python-${PYTHON}-hdfs-${HDFS}:latest
    build:
      context: .
      dockerfile: ci/docker/conda-latest-python-hdfs.dockerfile
      cache_from:
        - ${ORG}/${ARCH}-conda-latest-python-${PYTHON}-hdfs-${HDFS}:latest
      args:
        org: ${ORG}
        arch: ${ARCH}
        conda: latest
        python: ${PYTHON}
        jdk: ${JDK}
        maven: ${MAVEN}
        hdfs: ${HDFS}
    links:
      - hdfs-namenode:hdfs-namenode
      - hdfs-datanode-1:hdfs-datanode-1
      - hdfs-datanode-2:hdfs-datanode-2
    environment:
      - ARROW_HDFS_TEST_HOST=hdfs-namenode
      - ARROW_HDFS_TEST_PORT=9000
      - ARROW_HDFS_TEST_USER=root
    shm_size: *shm-size
    volumes: *conda-volumes
    entrypoint: *conda-entrypoint
    command:
      ["/arrow/ci/scripts/cpp_conda_build.sh /arrow /build/cpp &&
        /arrow/ci/scripts/python_build.sh /arrow &&
        /arrow/ci/scripts/integration_hdfs.sh /arrow /build/cpp"]

  conda-python-spark:
    # Usage:
    #   docker-compose build conda-cpp
    #   docker-compose build conda-python
    #   docker-compose build conda-python-spark
    #   docker-compose run conda-python-spark
    image: ${ORG}/${ARCH}-conda-latest-python-${PYTHON}-spark-${SPARK}:latest
    build:
      context: .
      dockerfile: ci/docker/conda-latest-python-spark.dockerfile
      cache_from:
        - ${ORG}/${ARCH}-conda-latest-python-${PYTHON}-spark-${SPARK}:latest
      args:
        org: ${ORG}
        arch: ${ARCH}
        conda: latest
        python: ${PYTHON}
        jdk: ${JDK}
        maven: ${MAVEN}
        spark: ${SPARK}
    shm_size: *shm-size
    volumes: *conda-volumes
    # - maven-cache:/root/.m2:delegated
    # - spark-cache:/spark:delegated
    entrypoint: *conda-entrypoint
    command:
      ["/arrow/ci/scripts/cpp_conda_build.sh /arrow /build/cpp &&
        /arrow/ci/scripts/python_build.sh /arrow &&
        /arrow/ci/scripts/java_build.sh /arrow &&
        /arrow/ci/scripts/integration_spark.sh /arrow /spark"]
